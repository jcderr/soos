# #!/bin/bash

if [ -n "$_imported" ]
    then
    return
fi

_imported=yes

# Docker
export DOCKER_HOST="tcp://10.1.2.4:2375"
LOCAL_SRC="$(dirname $0)/.."

ENV_FILE="$(dirname $0)/../environment_vars"
VAGRANT_BIN=`which vagrant`
DOCKER_BIN=`which docker`

red='\033[0;31m';
cyan='\033[0;36m';
yellow='\033[0;33m';
green='\033[1;32m';
reset='\033[0m';
check='\033[1;32mâœ”\033[0;39m';

error() {
    echo -n -e "${red}[ERROR] $@${reset}\n";
    exit 1;
}

info() {
    echo -n -e "${cyan}[INFO] $@${reset}\n";
}

warn() {
    echo -n -e "${yellow}[WARN] $@${reset}\n";
}

confirm() {
    prompt=$1
    if [ -z "$prompt" ];
    then
        prompt="Are you sure?"
    fi;
    read -p "$prompt [yN] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        echo -n -e "${red}Aborting.${reset}"
        echo
        exit 1
    fi
}

if [[ -e "$ENV_FILE" ]]; then
    DOCKER_EXTRA_OPTS="${DOCKER_EXTRA_OPTS} --env-file=$ENV_FILE"
fi

is_container_running() {
    NAME="$1"
    state=$($DOCKER_BIN ps | egrep -c "${NAME}\s+$")
    echo $state
}

is_container_available() {
    NAME="$1"
    state=$($DOCKER_BIN ps -a | egrep -c "${NAME}\s+$")
    echo $state
}

is_image_available() {
    NAME=$(echo $1 | awk -F: '{ print $1 }')
    TAG=$(echo $1 | awk -F: '{ print $2 }')
    state=$($DOCKER_BIN images -a | egrep -c '^$NAME\s+$TAG')
}

subcommand() {
    local C_NAME="$1"
    shift
    local C_ARGS="$@"
    local C_PATH="$(dirname $BASH_SOURCE)/soos-${C_NAME}"
    
    if [ -x "$C_PATH" ]; then
        NORUN=""
        command "$C_PATH" "$C_ARGS"
        return 0
    else
        return 1 #fail
    fi
}

# Python
pip_install() {
    pip install --exists-action i --find-links=support/pip/cache --find-links=support/pip/wheels $@;
}

pip_ensure_requirements() {
    subcommand updatewheels
}

pip_install_requirements() {
    pip_ensure_requirements
    
    info "Installing requirements"
    pip_install -qr requirements.txt
}

import_environment_vars() {
    if [ -e "$(dirname $0)/../../environment_vars" ]; then
        info "Importing environment for setup"
        for v in `cat $(dirname $0)/../../environment_vars`; do
            if [ "${v}" != *#* ]; then
                eval "export ${v}"
            fi
        done

        info "Environment computed and logged to /var/log/run_environment"
        env > /var/log/run_environment
    else
        export DEBUG=1
    fi
}

enforce_git_root() {
    if [ `pwd` != "$(git rev-parse --show-toplevel)" ]; then
        error "You must be in the repository root to run this command." 
    fi
}

run_command() {
    $@ 2>&1
    echo $?
}

status() {
    [[ "$1" == "-v" ]] && VERBOSE=1 && shift
    
    MESSAGE=$1
    shift
    CMD=$@
    echo -n -e "${green}[RUN] ${MESSAGE}... "
    RESULT=$(run_command $CMD)
    if [[ $RESULT != 0 ]]; then
        echo -e "${check}${reset}"
    else
        echo "X"
    fi
}

if [ -n "${DOCKER_BIN}" ]; then
    docker_run() { $DOCKER_BIN run -t $DOCKER_EXTRA_OPTS $DOCKER_VOLUMES $@; }
    docker_run_i() { $DOCKER_BIN run -ti $DOCKER_EXTRA_OPTS $DOCKER_VOLUMES $@; }
fi

# Setup container shell environment
if [ -d /opt/env/bin ]; then
    MANAGECMD="python manage.py"
    
    cd /opt/app
    source /opt/env/bin/activate
fi

image_age() {
    [[ -n "$1" ]] || error "Image name required"
    IMAGE=$(echo "$1" | awk -F: '{ print $1 }')
    TAG=$(echo "$1" | awk -F: '{ print $2 }')
    IMAGE_META=$($DOCKER_BIN images | egrep ^$IMAGE | grep $TAG)
    if [[ -n "$(echo $IMAGE_META | grep -v About)" ]]; then
        AGE="$(echo $IMAGE_META | awk '{ print $4, $5 }')"
    else
        AGE="~1 hour"
    fi
    
    echo $AGE
}

# Run the script's main() function.
if [ "$(type -t main)" = "function" ]; then
    main $@
else
    error "error starting command: main() missing or uncallable"
fi
